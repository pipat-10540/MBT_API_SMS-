import { Request, Response } from "express";
import pool from "../config/db";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { serialize } from "cookie";
import nodemailer from "nodemailer";
import axios from "axios";
import dotenv from "dotenv";
import { apiResponse } from "../model/response/response_standard";
import { signIn } from "../model/response/signin_interface";
import { sendSMS } from "../model/request/sendSMS";

dotenv.config();

export default class UserController {
  //#region Register

  async registerUser(
    req: Request,
    res: Response<apiResponse>
  ): Promise<Response<apiResponse>> {
    const {
      first_name,
      last_name,
      phone,
      email,
      password,
      product,
      newsletter,
      accept_terms,
      accept_policy,
    } = req.body;

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ email ‡∏´‡∏£‡∏∑‡∏≠ phone ‡∏ã‡πâ‡∏≥‡πÑ‡∏´‡∏°
      const [exists]: any = await pool.query(
        "SELECT id FROM users WHERE email = ? OR phone = ?",
        [email, phone]
      );

      if (exists.length > 0) {
        return res.status(200).json({
          success: false,
          message: "‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
          statusCode: 200,
        });
      }
      //‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏µ‡πÜ‡∏´‡∏ô‡πà‡∏≠‡∏¢
      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö
      const hashedPassword = await bcrypt.hash(password, 10);

      const sql = `
      INSERT INTO users
      (first_name, last_name, phone, email, password, product, newsletter, accept_terms, accept_policy)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;

      await pool.query(sql, [
        first_name,
        last_name,
        phone,
        email,
        hashedPassword,
        product,
        newsletter || false,
        accept_terms || false,
        accept_policy || false,
      ]);

      return res.status(200).json({
        success: true,
        message: "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        statusCode: 200,
      });
    } catch (error: any) {
      console.error("‚ùå Error:", error);
      return res.status(404).json({
        success: false,
        message: "‚ùå ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        statusCode: 404,
      });
    }
  }
  //#endregion

  //#region LoginUser
  async loginUser(
    req: Request,
    res: Response<apiResponse<signIn>>
  ): Promise<Response<apiResponse>> {
    const { email, password } = req.body;
    try {
      const [users]: any = await pool.query(
        "SELECT * FROM users WHERE email = ? OR phone = ?",
        [email, email]
      );

      if (users.length === 0) {
        return res.status(200).json({
          success: false,
          message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ",
          statusCode: 200,
        });
      }

      const user = users[0];
      const isMatch = await bcrypt.compare(password, user.password);

      if (!isMatch) {
        return res.status(200).json({
          success: false,
          message: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          statusCode: 200,
        });
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á token
      const token = jwt.sign(
        { id: user.id, email: user.email },
        process.env.JWT_SECRET as string,
        { expiresIn: "1h" }
      );

      // ‚úÖ ‡∏™‡πà‡∏á token ‡πÄ‡∏õ‡πá‡∏ô cookie httpOnly
      res.setHeader("Access-Control-Allow-Credentials", "true");
      res.setHeader(
        "Set-Cookie",
        serialize("token", token, {
          httpOnly: true, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô JS ‡∏ù‡∏±‡πà‡∏á frontend ‡∏≠‡πà‡∏≤‡∏ô cookie
          path: "/", // ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å path
          sameSite: "lax", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô CSRF ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
          secure: process.env.NODE_ENV === "production", // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HTTPS ‡∏ï‡∏≠‡∏ô production
          maxAge: 60 * 60 * 24,
        })
      );
      // data:{token, firstname: userData.firstname},
      return res.status(200).json({
        success: true,
        message: "‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        data: {
          token, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
          firstname: user.first_name + " " + user.last_name,
        },
        statusCode: 200,
      });
    } catch (error: any) {
      console.error("Login error:", error);
      return res.status(404).json({
        success: false,
        message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        statusCode: 404,
        data: error,
      });
    }
  }
  //#endregion

  //#region forgotPassword
  async forgotPassword(req: Request, res: Response<apiResponse>) {
    const { email } = req.body;
    console.log("REQ BODY:", req.body);
    if (!email) {
      return res.status(200).json({
        success: false,
        message: "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
        statusCode: 200,
      });
    }

    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô DB
      const [rows]: any = await pool.query(
        "SELECT id, email, first_name FROM users WHERE email = ?",
        [email]
      );
      if (rows.length === 0) {
        return res.status(200).json({
          success: false,
          message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ",
          statusCode: 200,
        });
      }

      const user = rows[0];

      // üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ token ‡∏î‡πâ‡∏ß‡∏¢)
      const resetLink = `http://localhost:3000/reset-password?user=${user.id}`;

      // ‚úâÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á transporter ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏ú‡πà‡∏≤‡∏ô Gmail
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });

      // üì® ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      await transporter.sendMail({
        from: `"MBT Support" <${process.env.EMAIL_USER}>`,
        to: user.email,
        subject: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        html: `
        <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${user.first_name},</p>
        <p>‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        <p>‡∏Ñ‡∏•‡∏¥‡∏Å <a href="${resetLink}">‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</a> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        <p>‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ</p>
        <br />
        <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞<br/>MBT Support</p>
      `,
      });

      return res.status(200).json({
        success: true,
        message:
          "‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        statusCode: 200,
      });
    } catch (err: any) {
      console.error("‚ùå Send Mail Error:", err);
      return res
        .status(404)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", statusCode: 404 });
    }
  }
  //#endregion

  //#region resetPassword
  async resetPassword(
    req: Request,
    res: Response<apiResponse>
  ): Promise<Response<apiResponse>> {
    const { userId, newPassword } = req.body;

    try {
      const hashedPassword = await bcrypt.hash(newPassword, 10);
      const [result]: any = await pool.query(
        "UPDATE users SET password = ? WHERE id = ?",
        [hashedPassword, userId]
      );
      if (result.affectedRows === 0) {
        return res
          .status(200)
          .json({ success: false, message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", statusCode: 200 });
      }

      return res.status(200).json({
        success: true,
        message: "‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        statusCode: 200,
      });
    } catch (error: any) {
      console.error("‚ùå Reset Error:", error);
      return res
        .status(404)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", statusCode: 404 });
    }
  }
  //#endregion

  //#region sendSMS
  async sendSMS(
    req: Request<any, any, sendSMS>,
    res: Response<apiResponse>
  ): Promise<Response<apiResponse>> {
    const {
      msisdn,
      message,
      sender,
      scheduled_delivery,
      force,
      Shorten_url,
      tracking_url,
      expire,
    } = req.body;

    try {
      const response = await axios.post(
        "https://api-v2.thaibulksms.com/sms",
        {
          msisdn,
          message,
          sender,
          scheduled_delivery,
          force,
          Shorten_url,
          tracking_url,
          expire,
        },
        {
          auth: {
            username: process.env.THAIBULKSMS_API_KEY!,
            password: process.env.THAIBULKSMS_API_SECRET!,
          },
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      // console.log("response_thaibulksms", response);

      const sql = `
      INSERT INTO sms_send
      (msisdn, message, sender, force_type, scheduled_delivery, 
      shorten_url, tracking_url, expire, api_status, api_response)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
    `;
      const toNullable = (value: any) =>
        value === "" || value === undefined ? null : value;
      //‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

      await pool.query(sql, [
        msisdn,
        message,
        sender,
        force,
        scheduled_delivery,
        Shorten_url,
        tracking_url,
        expire,
        "success",
        JSON.stringify(response.data),
      ]);
      console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database", {
        msisdn,
        message,
        sender,
        scheduled_delivery,
        force,
        Shorten_url,
        tracking_url,
        expire,
      });
      return res.status(200).json({
        success: true,
        message: "success",
        statusCode: 200,
        data: response.data,
      });
    } catch (error: any) {
      console.error(
        "‚ùå ThaiBulkSMS Error:",
        error.response?.data || error.message
      );
      return res.status(404).json({
        success: false,
        message: "error",
        statusCode: 404,
      });
    }
  }
  //#endregion

  //#region handleSmsWebhook
  async handleSmsWebhook(
    req: Request,
    res: Response<apiResponse>
  ): Promise<Response<apiResponse>> {
    const {
      message_id,
      msisdn,
      status,
      sent_time,
      done_time,
      error_message,
      Transaction, // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ThaiBulkSMS v2 (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
      Status,
      Time,
    } = req.query;

    console.log("üì© Webhook Callback (GET) Received:");
    console.log("Message ID:", message_id);
    console.log("Phone Number:", msisdn);
    console.log("Status:", status || Status);
    console.log("Sent Time:", sent_time);
    console.log("Done Time:", done_time);
    console.log("Error Message:", error_message);
    console.log("Transaction ID:", Transaction);
    console.log("Callback Time:", Time);

    // TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

    return res.status(200).json({
      success: true,
      message: "success",
      statusCode: 200,
    });
  }
  //#endregion
}
